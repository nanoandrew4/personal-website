package pages

import (
    "personal-website/internal"
    "personal-website/internal/components"
)

var (
    exampleOperations = []string {
        "2+2",
        "23.5 +((5 /2))",
        "2 * ((5/2+2) - (-3*1.5))",
        "-(2!)(-(3!))",
        "5^2",
        "25^0.5",
    }
)

templ CalculatorProject() {
    @components.Head("projects.calculator.title")
    <link rel="stylesheet" href={ internal.GetPathWithQueryHash("/assets/css/calculator.css") } />
    <script src="/assets/js/htmx.min.js"></script>
    <body theme="default">
        @components.Header("projects.calculator.header-title")
        <p>
            { internal.Localize(ctx, "projects.calculator.intro") }
        </p>

        <div class="operation-container">
            <textarea
                id="operation"
                type="text"
                placeholder="Operation"
                oninput={ handleTextAreaSize() }
                name="operation"
                hx-post="/calculator/operation"
                hx-target=".operation-result"
                />

            <div class="operation-result">
                <p hx-swap-oob="true" id="operation-equals"/>
                <p hx-swap-oob="true" id="result" />
            </div>
        </div>
        <div class="operation-example-container">
            <p> { internal.Localize(ctx, "projects.calculator.examples") } </p>
            for _, exampleOperation := range exampleOperations {
                <p class="operation-example" onclick={ setOperation(exampleOperation) }>
                    { exampleOperation }
                </p>
            }
        </div>
    </body>
}

script setOperation(operation string) {
    let operationElem = document.getElementById('operation')
    operationElem.value = operation
    operationElem.dispatchEvent(new Event('change'))
}

script handleTextAreaSize() {
    let operationElem = document.getElementById('operation')
    operationElem.style.height = ""
    operationElem.style.height = operationElem.scrollHeight + "px"
    if (operationElem.style.originalWidth === undefined) {
        operationElem.style.originalWidth = operationElem.getBoundingClientRect().width
    }

    const fontWeight = window.getComputedStyle(operationElem, null).getPropertyValue('font-weight') || 'normal';
    const fontSize = window.getComputedStyle(operationElem, null).getPropertyValue('font-size') || '16px';
    const fontFamily = window.getComputedStyle(operationElem, null).getPropertyValue('font-family') || 'Times New Roman';

    let font = `${fontWeight} ${fontSize} ${fontFamily}`;

    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    context.font = font;
    const metrics = context.measureText(operationElem.value + "    "); // needs padding to work properly

    if (metrics.width > operationElem.style.originalWidth) {
        operationElem.style.width = 'clamp(' + operationElem.style.originalWidth + 'px, ' + metrics.width + 'px, 80%)'
    } else if (operationElem.value == "") {
        operationElem.style.width = 'fit-content'
    }
}
